{"version":3,"file":"static/js/33.7a60f96f.chunk.js","mappings":"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","sources":["components/ToDo/Todo.jsx","components/FormToDo/FormToDo.jsx","components/FormToDo/FormFilterToDo.jsx","components/ToDoList/TodoList.jsx","components/pages/TodoPage.jsx"],"sourcesContent":["import { Link, useLocation } from \"react-router-dom\";\n\nconst ToDo = ({ todo, handleCheckCompleted, handleDelete }) => {\n  const location = useLocation();\n  return (\n    <li className=\"list-group-item\">\n      <div className=\"row justify-content-between\">\n        <div className=\"col-10\">\n          {handleCheckCompleted && (\n            <input\n              className=\"form-check-input me-2\"\n              type=\"checkbox\"\n              checked={todo.completed}\n              onChange={() => handleCheckCompleted(todo.id)}\n            />\n          )}\n          {handleCheckCompleted ? <Link to={todo.id} state={location}>{todo.title}</Link> : <h2>{todo.title}</h2>}\n          \n        </div>\n        <div className=\"col\">\n          {handleDelete && (\n            <button\n              type=\"button\"\n              disabled={!todo.completed}\n              className=\"btn-close\"\n              aria-label=\"Close\"\n              onClick={() => handleDelete(todo.id)}\n            ></button>\n          )}\n        </div>\n      </div>\n    </li>\n  );\n};\nexport default ToDo;\n","import { useState } from \"react\";\n\nconst FormToDo = ({ addTodo }) => {\n  const [todo, setTodo] = useState(\"\");\n\n  const handleChange = ({ target }) => {\n    setTodo(target.value);\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    //   this.props.createUser(this.state)\n\n    if (!todo) {\n      return alert(\"Please enter a valid value\");\n    }\n    addTodo(todo);\n    setTodo(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className=\"mb-3\">\n        <label htmlFor=\"exampleInputEmail1\" className=\"form-label\">\n          Create todo\n        </label>\n        <input\n          name=\"todo\"\n          type=\"text\"\n          className=\"form-control\"\n          id=\"exampleInputEmail1\"\n          onChange={handleChange}\n          value={todo}\n        />\n      </div>\n      <button type=\"submit\" className=\"btn btn-primary\">\n        Add todo\n      </button>\n    </form>\n  );\n};\n\nexport default FormToDo;\n","// import { useState } from \"react\";\n\n\nconst FormFilterToDo = ({ setSearchParams, filterText }) => {\n   \n  const handleChange = ({ target }) => {\n     \n      setSearchParams({filter: target.value})\n  };\n\n  return (\n    <form>\n      <div className=\"mb-3\">\n        <label htmlFor=\"exampleInputEmail1\" className=\"form-label\">\n          Filter todo\n        </label>\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          id=\"exampleInputEmail1\"\n                  onChange={handleChange}\n                  value={filterText}\n        />\n      </div>\n    </form>\n  );\n};\n\nexport default FormFilterToDo;\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useSearchParams } from \"react-router-dom\";\n// import { nanoid } from \"nanoid\";\nimport { toast } from \"react-toastify\";\nimport ToDo from \"../ToDo/Todo\";\n// import todo from \"../../todo.json\";\nimport FormToDo from \"../FormToDo/FormToDo\";\nimport FormFilterToDo from \"../FormToDo/FormFilterToDo\";\nimport { checkCompleted, createTodo, deleteTodo } from \"../../redux/todo/todoSlice\";\n// import {\n//   createTodo,\n//   deleteTodo,\n//   checkCompleted,\n// } from \"../../redux/todo/actions\";\n\n/*\n  |==============================\n  | COMPONENT ON HOOKS\n  |==============================\n*/\n\nconst ToDoList = () => {\n  // const [todoList, setTodoList] = useState(\"\");\n  const { todo: todoList } = useSelector((state) => state.todo);\n  const dispatch = useDispatch();\n  const [filteredTodoList, setFilteredTodoList] = useState(todoList);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const filterText = searchParams.get(\"filter\") ?? \"\";\n\n  // useEffect(() => {\n  //   const localTodo = localStorage.getItem(\"todo\");\n\n  //   if (localTodo) {\n  //     setFilteredTodoList(JSON.parse(localTodo));\n      \n  //   }\n  // }, []);\n\n  useEffect(() => {\n    todoList &&\n      setFilteredTodoList(\n        todoList.filter((todo) =>\n          todo.title.toLowerCase().includes(filterText.trim().toLowerCase())\n        )\n      );\n  }, [filterText, todoList]);\n\n  // useEffect(() => {\n  //   todoList && localStorage.setItem(\"todo\", JSON.stringify(todoList));\n  // }, [todoList]);\n\n  const handleCheckCompleted = (id) => {\n    dispatch(checkCompleted(id));\n  };\n  const handleDelete = (id) => {\n    dispatch(deleteTodo(id));\n    toast.success(\"Todo was successfully deleted!\");\n  };\n  const handleAddTodo = (todo) => {\n    // setTodoList((prevState) => {\n    //   return [\n    //     ...prevState,\n    //     {\n    //       id: nanoid(),\n    //       title: todo,\n    //       completed: false,\n    //     },\n    //   ];\n    // });\n    dispatch(createTodo(todo));\n    toast.success(\"Todo was successfully created!\");\n    \n  };\n\n  return (\n    <>\n      <h1>My To-Do list</h1>\n      <FormFilterToDo\n        setSearchParams={setSearchParams}\n        filterText={filterText}\n      />\n      {/* {isDelete && (\n          <div className=\"alert alert-danger\" role=\"alert\">\n            Todo was successfully deleted!\n          </div>\n        )}\n        {isCreate && (\n          <div className=\"alert alert-success\" role=\"alert\">\n            Todo was successfully created!\n          </div>\n        )} */}\n      <FormToDo addTodo={handleAddTodo} />\n      {filteredTodoList && (\n        <ul className=\"list-group list-group-flush\">\n          {filteredTodoList.map((todo) => (\n            <ToDo\n              key={todo.id}\n              todo={todo}\n              handleCheckCompleted={handleCheckCompleted}\n              handleDelete={handleDelete}\n            />\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\n/*\n  |==============================\n  | CLASS COMPONENT\n  |==============================\n*/\n\n// class ToDoList extends Component {\n//   state = {\n//     todoList: '',\n//     isDelete: false,\n//     isCreate: false,\n//   };\n//   componentDidMount() {\n//     if (localStorage.getItem('todo')) {\n//       this.setState({todoList: JSON.parse(localStorage.getItem('todo'))})\n//     }\n//   }\n//   componentDidUpdate(prevProps, prevState) {\n//     if (prevState.todoList.length > this.state.todoList.length) {\n//       localStorage.setItem('todo', JSON.stringify(this.state.todoList))\n//       this.setState({ isDelete: true });\n//       setTimeout(() => {\n//         this.setState({ isDelete: false });\n//       }, 2000);\n//     }\n//     if (prevState.todoList.length < this.state.todoList.length) {\n//             localStorage.setItem('todo', JSON.stringify(this.state.todoList))\n//       this.setState({ isCreate: true });\n//       setTimeout(() => {\n//         this.setState({ isCreate: false });\n//       }, 2000);\n//     }\n//   }\n\n//   handleCheckCompleted = (id) => {\n//     this.setState((prevState) => ({\n//       todoList: prevState.todoList.map((todo) =>\n//         todo.id === id ? { ...todo, completed: !todo.completed } : todo\n//       ),\n//     }));\n//   };\n//   handleDelete = (id) => {\n//     this.setState((prevState) => ({\n//       todoList: prevState.todoList.filter((todo) => todo.id !== id),\n//     }));\n//   };\n//   handleAddTodo = (todo) => {\n//     this.setState((prevState) => {\n//       return {\n//         todoList: [\n//           ...prevState.todoList,\n//           {\n//             id: nanoid(),\n//             title: todo,\n//             completed: false,\n//           },\n//         ],\n//       };\n//     });\n//   };\n//   render() {\n//     const { isDelete, isCreate } = this.state;\n//     return (\n//       <>\n//         <h1>My To-Do list</h1>\n//         {isDelete && (\n//           <div className=\"alert alert-danger\" role=\"alert\">\n//             Todo was successfully deleted!\n//           </div>\n//         )}\n//         {isCreate && (\n//           <div className=\"alert alert-success\" role=\"alert\">\n//             Todo was successfully created!\n//           </div>\n//         )}\n//         <FormToDo addTodo={this.handleAddTodo} />\n//         {this.state.todoList&&<ul className=\"list-group list-group-flush\">\n//           {this.state.todoList.map((todo) => (\n//             <ToDo\n//               key={todo.id}\n//               todo={todo}\n//               handleCheckCompleted={this.handleCheckCompleted}\n//               handleDelete={this.handleDelete}\n//             />\n//           ))}\n//         </ul>}\n//       </>\n//     );\n//   }\n// }\nexport default ToDoList;\n","import ToDoList from \"../ToDoList/TodoList\";\n\nconst TodoPage = () => {\n  return (\n   \n      <ToDoList />\n    \n  );\n};\n\nexport default TodoPage;\n"],"names":["_ref","todo","handleCheckCompleted","handleDelete","location","useLocation","_jsx","className","children","_jsxs","type","checked","completed","onChange","id","Link","to","state","title","disabled","onClick","addTodo","setTodo","useState","onSubmit","e","preventDefault","alert","htmlFor","name","_ref2","target","value","setSearchParams","filterText","filter","ToDoList","_searchParams$get","todoList","useSelector","dispatch","useDispatch","filteredTodoList","setFilteredTodoList","searchParams","useSearchParams","get","useEffect","toLowerCase","includes","trim","checkCompleted","deleteTodo","toast","success","_Fragment","FormFilterToDo","FormToDo","createTodo","map","ToDo","TodoPage"],"sourceRoot":""}
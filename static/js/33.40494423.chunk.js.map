{"version":3,"file":"static/js/33.40494423.chunk.js","mappings":"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","sources":["components/ToDo/Todo.jsx","components/FormToDo/FormToDo.jsx","components/FormToDo/FormFilterToDo.jsx","components/ToDoList/TodoList.jsx","components/pages/TodoPage.jsx"],"sourcesContent":["import { Link, useLocation } from \"react-router-dom\";\n\nconst ToDo = ({ todo, handleCheckCompleted, handleDelete }) => {\n  const location = useLocation();\n  return (\n    <li className=\"list-group-item\">\n      <div className=\"row justify-content-between\">\n        <div className=\"col-10\">\n          {handleCheckCompleted && (\n            <input\n              className=\"form-check-input me-2\"\n              type=\"checkbox\"\n              checked={todo.completed}\n              onChange={() => handleCheckCompleted(todo.id)}\n            />\n          )}\n          {handleCheckCompleted ? <Link to={todo.id} state={location}>{todo.title}</Link> : <h2>{todo.title}</h2>}\n          \n        </div>\n        <div className=\"col\">\n          {handleDelete && (\n            <button\n              type=\"button\"\n              disabled={!todo.completed}\n              className=\"btn-close\"\n              aria-label=\"Close\"\n              onClick={() => handleDelete(todo.id)}\n            ></button>\n          )}\n        </div>\n      </div>\n    </li>\n  );\n};\nexport default ToDo;\n","import { useState } from \"react\";\n\nconst FormToDo = ({ addTodo }) => {\n  const [todo, setTodo] = useState(\"\");\n\n  const handleChange = ({ target }) => {\n    setTodo(target.value);\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    //   this.props.createUser(this.state)\n\n    if (!todo) {\n      return alert(\"Please enter a valid value\");\n    }\n    addTodo(todo);\n    setTodo(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className=\"mb-3\">\n        <label htmlFor=\"exampleInputEmail1\" className=\"form-label\">\n          Create todo\n        </label>\n        <input\n          name=\"todo\"\n          type=\"text\"\n          className=\"form-control\"\n          id=\"exampleInputEmail1\"\n          onChange={handleChange}\n          value={todo}\n        />\n      </div>\n      <button type=\"submit\" className=\"btn btn-primary\">\n        Add todo\n      </button>\n    </form>\n  );\n};\n\nexport default FormToDo;\n","// import { useState } from \"react\";\n\n\nconst FormFilterToDo = ({ setSearchParams, filterText }) => {\n   \n  const handleChange = ({ target }) => {\n     \n      setSearchParams({filter: target.value})\n  };\n\n  return (\n    <form>\n      <div className=\"mb-3\">\n        <label htmlFor=\"exampleInputEmail1\" className=\"form-label\">\n          Filter todo\n        </label>\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          id=\"exampleInputEmail1\"\n                  onChange={handleChange}\n                  value={filterText}\n        />\n      </div>\n    </form>\n  );\n};\n\nexport default FormFilterToDo;\n","import { useEffect, useState } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { nanoid } from \"nanoid\";\nimport { toast } from \"react-toastify\";\nimport ToDo from \"../ToDo/Todo\";\n// import todo from \"../../todo.json\";\nimport FormToDo from \"../FormToDo/FormToDo\";\nimport FormFilterToDo from '../FormToDo/FormFilterToDo'\n\n/*\n  |==============================\n  | COMPONENT ON HOOKS\n  |==============================\n*/\n\nconst ToDoList = () => {\n  const [todoList, setTodoList] = useState(\"\");\n  const [filteredTodoList, setFilteredTodoList] = useState(null);\n\n  const [searchParams, setSearchParams] = useSearchParams()\n  \n  const filterText = searchParams.get('filter') ?? ''\n\n\n  useEffect(() => {\n    const localTodo = localStorage.getItem(\"todo\");\n    if (localTodo) {\n      setTodoList(JSON.parse(localTodo));\n    }\n  }, []);\n\n  useEffect(() => {\n    todoList && setFilteredTodoList(todoList?.filter(todo=>todo.title.toLowerCase().includes(filterText.toLowerCase().trim())))\n  },[filterText, todoList])\n\n  useEffect(() => {\n    todoList && localStorage.setItem(\"todo\", JSON.stringify(todoList));\n  }, [todoList]);\n\n  const handleCheckCompleted = (id) => {\n    setTodoList((prevState) => {\n      return prevState.map((todo) =>\n        todo.id === id ? { ...todo, completed: !todo.completed } : todo\n      );\n    });\n  };\n  const handleDelete = (id) => {\n    setTodoList((prevState) => prevState.filter((todo) => todo.id !== id));\n    toast.success('Todo was successfully deleted!');\n  };\n  const handleAddTodo = (todo) => {\n    setTodoList((prevState) => {\n      return [\n        ...prevState,\n        {\n          id: nanoid(),\n          title: todo,\n          completed: false,\n        },\n      ];\n    });\n    toast.success(\"Todo was successfully created!\");\n  };\n\n  return (\n    <>\n      <h1>My To-Do list</h1>\n      <FormFilterToDo setSearchParams={setSearchParams} filterText={filterText } />\n      {/* {isDelete && (\n          <div className=\"alert alert-danger\" role=\"alert\">\n            Todo was successfully deleted!\n          </div>\n        )}\n        {isCreate && (\n          <div className=\"alert alert-success\" role=\"alert\">\n            Todo was successfully created!\n          </div>\n        )} */}\n      <FormToDo addTodo={handleAddTodo} />\n      {filteredTodoList && (\n        <ul className=\"list-group list-group-flush\">\n          {filteredTodoList.map((todo) => (\n            <ToDo\n              key={todo.id}\n              todo={todo}\n              handleCheckCompleted={handleCheckCompleted}\n              handleDelete={handleDelete}\n            />\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\n/*\n  |==============================\n  | CLASS COMPONENT\n  |==============================\n*/\n\n// class ToDoList extends Component {\n//   state = {\n//     todoList: '',\n//     isDelete: false,\n//     isCreate: false,\n//   };\n//   componentDidMount() {\n//     if (localStorage.getItem('todo')) {\n//       this.setState({todoList: JSON.parse(localStorage.getItem('todo'))})\n//     }\n//   }\n//   componentDidUpdate(prevProps, prevState) {\n//     if (prevState.todoList.length > this.state.todoList.length) {\n//       localStorage.setItem('todo', JSON.stringify(this.state.todoList))\n//       this.setState({ isDelete: true });\n//       setTimeout(() => {\n//         this.setState({ isDelete: false });\n//       }, 2000);\n//     }\n//     if (prevState.todoList.length < this.state.todoList.length) {\n//             localStorage.setItem('todo', JSON.stringify(this.state.todoList))\n//       this.setState({ isCreate: true });\n//       setTimeout(() => {\n//         this.setState({ isCreate: false });\n//       }, 2000);\n//     }\n//   }\n\n//   handleCheckCompleted = (id) => {\n//     this.setState((prevState) => ({\n//       todoList: prevState.todoList.map((todo) =>\n//         todo.id === id ? { ...todo, completed: !todo.completed } : todo\n//       ),\n//     }));\n//   };\n//   handleDelete = (id) => {\n//     this.setState((prevState) => ({\n//       todoList: prevState.todoList.filter((todo) => todo.id !== id),\n//     }));\n//   };\n//   handleAddTodo = (todo) => {\n//     this.setState((prevState) => {\n//       return {\n//         todoList: [\n//           ...prevState.todoList,\n//           {\n//             id: nanoid(),\n//             title: todo,\n//             completed: false,\n//           },\n//         ],\n//       };\n//     });\n//   };\n//   render() {\n//     const { isDelete, isCreate } = this.state;\n//     return (\n//       <>\n//         <h1>My To-Do list</h1>\n//         {isDelete && (\n//           <div className=\"alert alert-danger\" role=\"alert\">\n//             Todo was successfully deleted!\n//           </div>\n//         )}\n//         {isCreate && (\n//           <div className=\"alert alert-success\" role=\"alert\">\n//             Todo was successfully created!\n//           </div>\n//         )}\n//         <FormToDo addTodo={this.handleAddTodo} />\n//         {this.state.todoList&&<ul className=\"list-group list-group-flush\">\n//           {this.state.todoList.map((todo) => (\n//             <ToDo\n//               key={todo.id}\n//               todo={todo}\n//               handleCheckCompleted={this.handleCheckCompleted}\n//               handleDelete={this.handleDelete}\n//             />\n//           ))}\n//         </ul>}\n//       </>\n//     );\n//   }\n// }\nexport default ToDoList;\n","import ToDoList from \"../ToDoList/TodoList\";\n\nconst TodoPage = () => {\n  return (\n   \n      <ToDoList />\n    \n  );\n};\n\nexport default TodoPage;\n"],"names":["_ref","todo","handleCheckCompleted","handleDelete","location","useLocation","_jsx","className","children","_jsxs","type","checked","completed","onChange","id","Link","to","state","title","disabled","onClick","addTodo","setTodo","useState","onSubmit","e","preventDefault","alert","htmlFor","name","_ref2","target","value","setSearchParams","filterText","filter","ToDoList","_searchParams$get","todoList","setTodoList","filteredTodoList","setFilteredTodoList","searchParams","useSearchParams","get","useEffect","localTodo","localStorage","getItem","JSON","parse","toLowerCase","includes","trim","setItem","stringify","prevState","map","toast","success","_Fragment","FormFilterToDo","FormToDo","nanoid","ToDo","TodoPage"],"sourceRoot":""}